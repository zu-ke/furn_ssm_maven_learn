<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web com.zk.Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <!--web应用程序指定一个名称，这个名称通常用于管理或部署工具中，以便于人们识别和区分不同的应用程序-->
  <display-name>Archetype Created Web com.zk.Application</display-name>

  <!--配置处理中文乱码的过滤器
      拦截所有请求，处理编码, 提醒，把过滤器配置到web.xml前面
      配置Spring提供的过滤器，解决中文乱码问题
  -->
  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--配置HiddenHttpMethodFilter
    1. 作用是 把 以post方式提交的delete和put请求进行转换
    2. 配置url-pattern 是 /* 表示请求都经过 hiddenHttpMethodFilter过滤
    3. 后面通过debug源码，就看的很清楚
  -->
  <filter>
    <filter-name>hiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>hiddenHttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--
      配置前端控制器/中央控制器/分发控制器,所以用户的请求都会经过它处理
      没有指定springmvc的配置文件，那么就会默认按照servlet-name-servelt.xml来读取，默认在WEB-INF目录下
  -->
  <servlet>
    <servlet-name>springDispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--
      项目启动时，就自动加载DispatcherServlet
    -->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <!--
        1. 这里我们配置的url-pattern是 / ,表示用户的请求都经过 DispatcherServlet
        2. 这样配置也这次rest 风格的url请求
    -->
    <servlet-name>springDispatcherServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!--
    每个<context-param>元素包含一个<param-name>和一个<param-value>元素，分别用来指定参数的名称和值。
    在Spring框架中，<context-param>常用来指定Spring的根应用上下文文件的位置。
    例如，你可以如下配置Spring的根应用上下文文件：
    <context-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/applicationContext.xml</param-value>
    </context-param>
    在这个例子中，contextConfigLocation是一个参数名，它告诉Spring的ContextLoaderListener在哪里查找应用上下文文件（即Spring的配置文件）。
    当Web应用程序启动时，ContextLoaderListener会读取这个参数，并加载指定位置的配置文件，以初始化Spring容器。
    这些参数可以在Web应用程序的任何地方通过ServletContext对象获取。例如，在servlet中，你可以使用如下代码来访问这些参数：
    String configLocation = getServletContext().getInitParameter("contextConfigLocation");
    这种方式允许在不修改代码的情况下改变配置，因为<context-param>参数是在部署描述符web.xml中设置的。
  -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <!--类路径下查找applicationContext.xml这个文件-->
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>

  <listener>
    <!--
      ContextLoaderListener: 监听器
      1.ContextLoaderListener监听器的作用是启动web容器时，自动装配ApplicationContext的配置信息
      2.它实现了ServletContextListener接口，在web.xml配置该监听器，启动容器时，会默认执行它实现的方法
    -->
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
</web-app>
